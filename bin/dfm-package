#!/usr/bin/env python3
# -*- coding: utf-8 -*-
# File   : dfm-package
# Author : Jiayuan Mao
# Email  : maojiayuan@gmail.com
# Date   : 12/03/2018
#
# This file is part of dotfiles.

import sys
import os.path as osp
import time
import glob
import argparse

parser = argparse.ArgumentParser('DFM-Package')
parser.add_argument('--prefix', default=osp.expanduser('~'))
parser.set_defaults(action='help')
subparsers = parser.add_subparsers()

parser_install = subparsers.add_parser('install', help='Install pacakges.')
parser_install.set_defaults(action='install')
parser_install.add_argument('package')
parser_install.add_argument('--no-mappings', action='store_true')
parser_install.add_argument('--no-commands', action='store_true')

parser_list = subparsers.add_parser('list', help='List packages.')
parser_list.set_defaults(action='list')

args = parser.parse_args()

args.root_dir = osp.dirname(osp.dirname(osp.realpath(__file__)))
args.package_dir = osp.join(args.root_dir, 'packages')
sys.path.insert(0, args.root_dir)


def load_package_config(root_dir):
    import imp
    return imp.load_source('configs', osp.join(root_dir, 'configs.py'))


def execute_config(configs):
    if not args.no_mappings:
        import dfm.mappings as mappings
        with mappings.change_dir(args.package_dir, args.prefix):
            configs.__mappings__()

    if not args.no_commands:
        import dfm.commands as commands
        with commands.change_dir(args.package_dir):
            configs.__commands__()


def main():
    if args.action == 'install':
        package = osp.join(args.package_dir, args.package)
        if not osp.exists(package):
            raise ValueError('Unknown package: {}.'.format(args.package))
        config = load_package_config(package)
        execute_config(config)
    elif args.action == 'list':
        configs = glob.glob(osp.join(args.package_dir, '*', 'configs.py'))
        for config_file in sorted(configs):
            print('{}: (Last update: {})'.format(
                osp.basename(osp.dirname(config_file)), 
                time.strftime(
                    '%Y-%m-%d %H:%M:%S', 
                    time.localtime(osp.getmtime(config_file))
                )
            ))
    elif args.action == 'help':
        parser.print_help()
    else:
        raise ValueError('Unknown action: {}.'.format(args.action))

if __name__ == '__main__':
    main()
